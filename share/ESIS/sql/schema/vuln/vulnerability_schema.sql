--
--
-- ESIS
--
-- Copyright (c) 2004-2008 Entelience SARL,  Copyright (c) 2008-2009 Equity SA
--
-- Projects contributors : Philippe Le Berre, Thomas Burdairon, Benjamin Baudel,
--                         Benjamin S. Gould, Diego Patinos Ramos, Constantin Cornelie
-- 
-- 
-- This file is part of ESIS.
-- 
-- ESIS is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation version 3 of the License.
-- 
-- ESIS is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
-- 
-- You should have received a copy of the GNU General Public License
-- along with ESIS.  If not, see <http://www.gnu.org/licenses/>.
--
-- $Id: vulnerability_schema.sql 11 2009-07-07 15:02:53Z tburdairon $
--
--


--
-- contains: vulnerability review process schema

--
-- #1 : delete existing schema: nb. in reverse order to create!
--

-- drop schema cascade drops everything in it
CREATE SCHEMA vuln;

--
-- #1 : unique vulnerability ids
--

CREATE SEQUENCE vuln.e_vulnerability_serial START 100;
CREATE TABLE	vuln.e_vulnerability (
	e_vulnerability_id	integer		DEFAULT nextval('vuln.e_vulnerability_serial'),
	-- for object audit
	obj_ser			integer		NOT NULL,
	obj_lm			timestamptz	NOT NULL,
	db_user			text		NOT NULL,
	-- for raci
	e_raci_obj		integer		NOT NULL,
	--
	e_vuln_id_primary	integer,	-- default to null
		-- Unique vulnerability id
	-- Add ESIS vulnerability information here.
	is_new_published	boolean		DEFAULT false,
	is_new_scanned		boolean		DEFAULT false,
	severity			integer		DEFAULT 0,	-- @see e_vulnerability_severity
	receive_date		timestamptz DEFAULT current_timestamp,
	triage_date		timestamptz,
	-- See com.entelience.soap.VulnerabilityAnalysis:
	-- business impact
	bi_brand		integer		DEFAULT 0,
	bi_busops		integer		DEFAULT 0,
	bi_bussup		integer		DEFAULT 0,
	bi_intops		integer		DEFAULT 0,
	bi_comment		text,
	-- tech impact
	ti_unix			integer		DEFAULT 0,
	ti_windows		integer		DEFAULT 0,
	ti_network		integer		DEFAULT 0,
	ti_access		integer		DEFAULT 0,
	ti_apps			integer		DEFAULT 0,
	ti_comment		text,
	-- exposure
	ex_unix			integer		DEFAULT 0,
	ex_unix_n		integer,
	ex_windows		integer		DEFAULT 0,
	ex_windows_n		integer,
	ex_network		integer		DEFAULT 0,
	ex_network_n		integer,
	ex_access		integer		DEFAULT 0,
	ex_access_n		integer,
	ex_apps			integer		DEFAULT 0,
	ex_apps_n		integer,
	ex_comment		text,
	-- status
	status			integer		DEFAULT 0,	-- @see e_vulnerability_status - 0 new, 1 action plan, 2 investigate, 3 archive, 4 ignore
	ignored			boolean		DEFAULT false,
	--
	d_priority		integer		DEFAULT 0,	-- @see e_vulnerability_priority
	d_mav_status		integer		DEFAULT 0,
	d_mav_target		timestamptz,
	start_investigate	timestamptz,  --date when the meeting is closed if the decision is Investigate
	end_investigate		timestamptz,  --date when the decision changes from Investigate to another decision
	start_action		timestamptz,  --date when the meeting is closed if the decision is Repair
	end_action		timestamptz,  --date when the decision changes from Repair to another decision or the vulnerability is fixed
	closed_date		timestamptz,  --date when the vuln is fixed
	PRIMARY KEY(e_vulnerability_id)
);

CREATE INDEX e_vulnerability_i_evp ON vuln.e_vulnerability (e_vuln_id_primary);
CREATE INDEX e_vulnerability_sev ON vuln.e_vulnerability (severity);
CREATE INDEX e_vulnerability_sta ON vuln.e_vulnerability (status);
CREATE INDEX e_vulnerability_pri ON vuln.e_vulnerability (d_priority);
CREATE INDEX e_vulnerability_mav ON vuln.e_vulnerability (d_mav_status);
CREATE INDEX e_vulnerability_tri ON vuln.e_vulnerability (receive_date);
CREATE INDEX e_vulnerability_rec ON vuln.e_vulnerability (triage_date);

-- call the function to create the trigger...
SELECT create_trgfn_maint_object_audit('vuln', 'e_vulnerability', 'e_vulnerability_id', 'e_vulnerability_serial');
SELECT create_trgfn_maint_raci('vuln', 'e_vulnerability');

-- References for vulnerabilities
--
CREATE TABLE	vuln.e_vulnerability_hrefs (
	e_vulnerability_id	integer,		-- @see e_vulnerability
	url					text,			-- url of vulnerability report on the web
	link_description	text			-- text that goes with this link
)
WITH OIDS; -- e_vulnerability_id
CREATE INDEX e_vulnerability_hrefs_i_ev ON vuln.e_vulnerability_hrefs (e_vulnerability_id);

-- Import reports
--
CREATE TABLE	vuln.e_vulnerability_reports (
	e_vulnerability_id	integer		NOT NULL,	-- @see e_vulnerability
	e_vuln_id			integer,				-- @see i_vuln & other tables
	vuln_name			text		NOT NULL	-- copy of vuln_name in i_vuln for this e_vuln_id, may be non-null when e_vuln_id is null.
)
WITH OIDS; -- e_vulnerability_id
CREATE INDEX	e_vulnerability_reports_i_evid ON vuln.e_vulnerability_reports (e_vulnerability_id);
CREATE INDEX	e_vulnerability_reports_i_vn ON vuln.e_vulnerability_reports (vuln_name);
CREATE INDEX	e_vulnerability_reports_i_ev ON vuln.e_vulnerability_reports (e_vuln_id);

-- Vendor per Vulnerability
--
CREATE TABLE	vuln.e_vulnerability_vpv (
	e_vulnerability_id	integer,	-- @see e_vulnerability
	e_vendor_id			integer,	-- @see e_vendor
	e_product_id		integer,	-- @see e_product
	e_version_id		integer		-- @see e_version
)
WITH OIDS; -- e_vulnerability_id
CREATE INDEX	e_vulnerability_vpv_i_v ON vuln.e_vulnerability_vpv (e_vendor_id);
CREATE INDEX	e_vulnerability_vpv_i_p ON vuln.e_vulnerability_vpv (e_product_id);
CREATE INDEX	e_vulnerability_vpv_i_ev ON vuln.e_vulnerability_vpv (e_vulnerability_id);

-- Severity Levels
CREATE TABLE vuln.e_vulnerability_severity (
	e_severity_id	integer PRIMARY KEY,
	severity_name	text UNIQUE
);
-- see sql/lang/vuln/vulnerability_strings.sqltemplate

-- Status 
CREATE TABLE vuln.e_vulnerability_status (
	e_status_id	integer PRIMARY KEY,
	status_name	text UNIQUE
);
-- see sql/lang/vuln/vulnerability_strings.sqltemplate

-- Priority levels
--
CREATE TABLE vuln.e_vulnerability_priority (
	e_priority_id	integer PRIMARY KEY,
	priority_name	text UNIQUE
);
-- see sql/lang/vuln/vulnerability_strings.sqltemplate

-- Action status
--
CREATE TABLE	vuln.e_vulnerability_mav_status (
	e_mav_status_id			integer PRIMARY KEY,	-- status id
	mav_status_name			text UNIQUE
);
-- see sql/lang/vuln/vulnerability_strings.sqltemplate

-- 
-- 2: Vulnerability review tables
--

CREATE SEQUENCE vuln.e_vulnerability_comments_serial;
CREATE TABLE	vuln.e_vulnerability_comments (
	e_vulnerability_comments_id	integer	DEFAULT nextval('vuln.e_vulnerability_comments_serial'),
	-- for object audit
	obj_ser			integer		NOT NULL,
	obj_lm			timestamptz	NOT NULL,
	db_user			text		NOT NULL,
	--
	comment_date				timestamptz DEFAULT current_timestamp,
	comment						text NOT NULL,
	e_people_id					integer NOT NULL,
	deleted 		boolean 	NOT NULL DEFAULT false,
	PRIMARY KEY(e_vulnerability_comments_id)
);
CREATE INDEX e_vulnerability_comments_comment ON vuln.e_vulnerability_comments (comment);


CREATE TABLE vuln.e_vulnerability_comments_history (
 	e_vulnerability_comments_id	integer 	NOT NULL,
 	change_date 		timestamptz 	NOT NULL DEFAULT current_timestamp,
 	modifier 		integer 	NOT NULL,
 	comment 		text
);




-- call the function to create the trigger...
SELECT create_trgfn_maint_object_audit('vuln', 'e_vulnerability_comments', 'e_vulnerability_comments_id', 'e_vulnerability_comments_serial');


--
-- A meeting is considered OPEN if end_date == null
-- To close a meeting update end_date to current_timestamp.
-- To open a meeting check first there's no opened meeting!
--
CREATE SEQUENCE vuln.e_vulnerability_vrt_serial;
CREATE TABLE	vuln.e_vulnerability_vrt (
	e_vulnerability_vrt_id		integer DEFAULT nextval('vuln.e_vulnerability_vrt_serial'),
	-- for object audit
	obj_ser			integer		NOT NULL,
	obj_lm			timestamptz	NOT NULL,
	db_user			text		NOT NULL,
	--
	-- for raci
	e_raci_obj		integer		NOT NULL,
	--
	start_date			timestamptz DEFAULT current_timestamp,
	end_date			timestamptz,
	paused				boolean DEFAULT false,
	closed				boolean DEFAULT false,
	creation_date			timestamptz DEFAULT current_timestamp NOT NULL,
	PRIMARY KEY(e_vulnerability_vrt_id)
);


-- call the function to create the trigger...
SELECT create_trgfn_maint_object_audit('vuln', 'e_vulnerability_vrt', 'e_vulnerability_vrt_id', 'e_vulnerability_vrt_serial');
SELECT create_trgfn_maint_raci('vuln', 'e_vulnerability_vrt');
--
-- We do not create a VRT in the Install, because VRT creation have RACI logic to propagate 
--


--
-- A meeting has vulnerabilities
--
CREATE TABLE	vuln.e_vulnerability_vrt_items (
	e_vulnerability_vrt_id		integer NOT NULL,
	e_vulnerability_id			integer NOT NULL
)
WITH OIDS; -- e_vulnerability_id
CREATE INDEX e_vulnerability_vrt_items_i_ev ON vuln.e_vulnerability_vrt_items (e_vulnerability_id);
CREATE INDEX e_vulnerability_vrt_items_i_vrt ON vuln.e_vulnerability_vrt_items (e_vulnerability_vrt_id);

-- Vulnerability history of changes
--
CREATE TABLE	vuln.e_vulnerability_history (
	e_vulnerability_id		integer NOT NULL,	-- vulnerability id
	change_date			timestamptz DEFAULT current_timestamp,
	current				boolean DEFAULT true, -- true for 'most recent' record
	modifier			integer,	-- @see e_people
	status				integer,
	owner				integer, -- @see e_people
	priority			integer,
	mav_status			integer, -- @see e_vulnerability_mav_status
	target_date			timestamptz
)
WITH OIDS; -- e_vulnerability_id
CREATE INDEX e_vulnerability_history_i_ev ON vuln.e_vulnerability_history (e_vulnerability_id);

-- Vulnerability metrics' target
--
CREATE TABLE vuln.e_vulnerability_targets (
	e_target_id	integer PRIMARY KEY,
	name		text,
	value		integer,
	key_id		integer DEFAULT NULL
);
INSERT INTO vuln.e_vulnerability_targets VALUES (0, 'ignore_rate', 30);
INSERT INTO vuln.e_vulnerability_targets VALUES (1, 'add_rate', 30);
INSERT INTO vuln.e_vulnerability_targets VALUES (2, 'open_size', 50);
INSERT INTO vuln.e_vulnerability_targets VALUES (3, 'fix_size', 25);
INSERT INTO vuln.e_vulnerability_targets VALUES (4, 'open_time', 7);
INSERT INTO vuln.e_vulnerability_targets VALUES (5, 'vrt_time', 7);
INSERT INTO vuln.e_vulnerability_targets VALUES (6, 'close_time', 60, 0); -- unrated
INSERT INTO vuln.e_vulnerability_targets VALUES (7, 'close_time', 30, 1); -- low
INSERT INTO vuln.e_vulnerability_targets VALUES (8, 'close_time', 15, 2); -- medium
INSERT INTO vuln.e_vulnerability_targets VALUES (9, 'close_time', 7, 3); -- high
INSERT INTO vuln.e_vulnerability_targets VALUES (10, 'close_time', 3, 4); -- critical
INSERT INTO vuln.e_vulnerability_targets VALUES (11, 'fix_time', 28); --period that go with fix_size : 7 = 1week, 28=1month, 365=1year

-- Vulnerability search history
-- bug1516
CREATE SEQUENCE vuln.e_vulnerability_searchs_serial;
CREATE TABLE vuln.e_vulnerability_searchs (
    e_vulnerability_searchs_id  integer 	DEFAULT nextval('vuln.e_vulnerability_searchs_serial'),
    search                      text,
    search_number               int,
    e_people_id                 integer,  -- @see e_people
    PRIMARY KEY (e_vulnerability_searchs_id)
);
CREATE INDEX e_vulnerability_searchs_people ON vuln.e_vulnerability_searchs (e_people_id);


-- multiple action for 1 vuln
-- bug1524


CREATE SEQUENCE vuln.e_vulnerability_action_serial;
CREATE TABLE vuln.e_vulnerability_action (
    e_vulnerability_action_id                 integer     DEFAULT nextval('vuln.e_vulnerability_action_serial'),
	-- for object audit
	obj_ser			integer		NOT NULL,
	obj_lm			timestamptz	NOT NULL,
	db_user			text		NOT NULL,
	--
	-- for raci
	e_raci_obj		integer		NOT NULL,
	--
    e_vulnerability_id          integer NOT NULL,   --e_vulnerability
    changeref                   text,
    workload                    text,
    description			text,
    priority                    integer default 0,  --e_vulnerability_priority
    mav_status                  integer default 0,  --e_vulnerability_mav_status
    target_date                 timestamptz,
    hidden                      boolean default false,
    creation_date	timestamptz	DEFAULT current_timestamp NOT NULL,
    closed_date		timestamptz,  --when it passes to fix or wont fix
    PRIMARY KEY(e_vulnerability_action_id)
)
WITH OIDS; -- e_vulnerability_id

CREATE INDEX e_vulnerability_action_i_vid ON vuln.e_vulnerability_action (e_vulnerability_id);
CREATE INDEX e_vulnerability_action_i_mst ON vuln.e_vulnerability_action (mav_status);
CREATE INDEX e_vulnerability_action_i_prio ON vuln.e_vulnerability_action (priority);

-- call the function to create the trigger...
SELECT create_trgfn_maint_object_audit('vuln', 'e_vulnerability_action', 'e_vulnerability_action_id', 'e_vulnerability_action_serial');
SELECT create_trgfn_maint_raci('vuln', 'e_vulnerability_action');


CREATE TABLE vuln.e_vulnerability_comments_to_action(
    e_vulnerability_comments_id     integer NOT NULL,  -- e_vulnerability_comment
    e_vulnerability_id              integer NOT NULL,  -- e_vulnerability
    e_vulnerability_action_id       integer            -- e_vulnerability_action (can be null if the vuln is not in an action)
)
WITH OIDS; -- e_vulnerability_id

CREATE INDEX e_vulnerability_comments_to_action_cid ON vuln.e_vulnerability_comments_to_action (e_vulnerability_comments_id);
CREATE INDEX e_vulnerability_comments_to_action_vid ON vuln.e_vulnerability_comments_to_action (e_vulnerability_id);
CREATE INDEX e_vulnerability_comments_to_action_aid ON vuln.e_vulnerability_comments_to_action (e_vulnerability_action_id);

CREATE TABLE vuln.e_vulnerability_action_history(
    e_vulnerability_action_id       integer  NOT NULL, --see e_vulnerability_action
    change_date                     timestamptz default current_timestamp,
    modifier                        integer NOT NULL,   --see e_people
    mav_status                      integer,            --see e_vulnerability_mav_status
    owner                           integer,            --see e_people
    target_date                     timestamptz,
    priority			    integer,
    current                         boolean default true
);

CREATE INDEX e_vulnerability_action_history_aid ON vuln.e_vulnerability_action_history (e_vulnerability_action_id);
CREATE INDEX e_vulnerability_action_history_mod ON vuln.e_vulnerability_action_history (modifier);
CREATE INDEX e_vulnerability_action_history_sts ON vuln.e_vulnerability_action_history (mav_status);
CREATE INDEX e_vulnerability_action_history_own ON vuln.e_vulnerability_action_history (owner);


--
-- votes for vulnerabilities decisions
--
CREATE TABLE vuln.e_vote(
	e_vulnerability_id	int            NOT NULL,        --the affected vulnerability
	e_people_id		int,           -- if it's a user vote
	e_group_id              int,           -- it it's a group vote
	voter                   int            NOT NULL,  -- the user that did the vote (usefull for group votes)
	vote_date		timestamptz 	DEFAULT current_timestamp,
	decision		int,		--cf e_vulnerability_status
	e_vulnerability_comments_id 	int    --e_vulnerability_comments, null if no comment associated to the vote
) 
WITH OIDS; -- e_vulnerability_id
CREATE UNIQUE INDEX e_vote_people ON vuln.e_vote(e_vulnerability_id, e_people_id);
CREATE UNIQUE INDEX e_vote_group ON vuln.e_vote(e_vulnerability_id, e_group_id);

-- Status 
CREATE TABLE vuln.e_vulnerability_vote_decision (
	e_vulnerability_vote_decision_id	integer PRIMARY KEY,
	vote_decision	text UNIQUE
);
-- see sql/lang/vuln/vulnerability_strings.sqltemplate

-- vulnerability data interface.
--

CREATE SEQUENCE vuln.i_vuln_serial;
CREATE TABLE	vuln.i_vuln
(
	e_vuln_id	int	DEFAULT nextval('vuln.i_vuln_serial'), -- common vulnerability id for reported & published vulnerabilities
	vuln_name	text	NOT NULL,		-- Vulnerability ID, CVE if source uses CVE id, MS if the source is Microsoft
	publish_date	timestamptz	NOT NULL,	-- Publish date
	last_modified	timestamptz	DEFAULT NULL,	-- last modified
	description	text,		-- description
	title		text,		-- vulnerability title
	rank		int	NOT NULL,		-- rank (1 cert, 10 nist, 11 securityfocus, 100 microsoft, 1000 nessus)
	PRIMARY KEY(e_vuln_id)
);

CREATE TABLE vuln.e_cvss(
        e_vuln_id               int     NOT NULL, --vuln.e_vuln
        base_score              real    NOT NULL,
        temporal_score          real,
        environmental_score     real,
        overall_score           real    NOT NULL,
        vector                  text    NOT NULL,
        base_e_av               text    NOT NULL CHECK (base_e_av IN ('L','A','N')),       -- access vector
        base_e_ac               text    NOT NULL CHECK (base_e_ac IN ('H','M','L')),       -- access complexity
        base_e_au               text    NOT NULL CHECK (base_e_au IN ('M','S','N')),       -- authentication
        base_i_c                text    NOT NULL CHECK (base_i_c IN ('N','P','C')),       -- confidentiality impact
        base_i_i                text    NOT NULL CHECK (base_i_i IN ('N','P','C')),       -- integrity impact
        base_i_a                text    NOT NULL CHECK (base_i_a IN ('N','P','C')),       -- availability impact
        temp_e                  text    NOT NULL CHECK (temp_e IN ('U','POC','F','H','ND')),       -- exploitability
        temp_rl                 text    NOT NULL CHECK (temp_rl IN ('OF','TF','W','U','ND')),       -- remediation level
        temp_rc                 text    NOT NULL CHECK (temp_rc IN ('UC','UR','C','ND')),       -- report confidence
        env_g_cdp               text    NOT NULL CHECK (env_g_cdp IN ('N','L','LM','MH','H','ND')),       -- collateral damage potential
        env_g_td                text    NOT NULL CHECK (env_g_td IN ('N','L','M','H','ND')),       -- target distribution
        env_i_cr                text    NOT NULL CHECK (env_i_cr IN ('L','M','H','ND')),       -- confidentiality requirement
        env_i_ir                text    NOT NULL CHECK (env_i_ir IN ('L','M','H','ND')),       -- integrity requirement
        env_i_ar                text    NOT NULL CHECK (env_i_ar IN ('L','M','H','ND')),       -- availability requirement
        PRIMARY KEY(e_vuln_id)
);

CREATE OR REPLACE FUNCTION trgfn_upd_cvss_vector() RETURNS TRIGGER AS $trig$
        DECLARE
        BEGIN
                NEW.vector = '(' || 
                        'AV:' || NEW.base_e_av || '/' ||
                        'AC:' || NEW.base_e_ac || '/' ||
                        'Au:' || NEW.base_e_au || '/' ||
                        'C:' || NEW.base_i_c || '/' ||
                        'I:' || NEW.base_i_i || '/' ||
                        'A:' || NEW.base_i_a || '/' ||
                        'E:' || NEW.temp_e || '/' ||
                        'RL:' || NEW.temp_rl || '/' ||
                        'RC:' || NEW.temp_rc || '/' ||
                        'CDP:' || NEW.env_g_cdp || '/' ||
                        'TD:' || NEW.env_g_td || '/' ||
                        'CR:' || NEW.env_i_cr || '/' ||
                        'IR:' || NEW.env_i_ir || '/' ||
                        'AR:' || NEW.env_i_ar || ')';
                        
                RETURN NEW;
        END;
$trig$ LANGUAGE plpgsql;

CREATE TRIGGER trg_maint_e_cvss_vector BEFORE INSERT OR UPDATE ON vuln.e_cvss
      FOR EACH ROW EXECUTE PROCEDURE trgfn_upd_cvss_vector();

CREATE TABLE vuln.e_cvss_history(
        e_vuln_id       int     NOT NULL,
        change_date     timestamptz     NOT NULL DEFAULT current_timestamp,
        modifier        int     NOT NULL,
        vector          text    NOT NULL,
        overall_score   real    NOT NULL
);

--
--  NIST data
--

CREATE TABLE	vuln.t_vuln_nist (
	severity			text,	-- severity (Low to High?)
	-- Vuln_Software		text,	-- List of vulnerable software packages
	references_a			text,	-- References
	evaluator_comments		text,	-- Comments
	status_a			text,	-- Status
	prev_id				text,	-- previous CVE id if any
	-- @todo boolean data type
	ar_launch_remotely		int,	-- can be exploited remotely
	ar_launch_locally		int,	-- can be exploited locally
	ar_protocol_used		int,	-- exploits a protocol
	ar_target_access_attacker	int,	-- ??
	--
	lt_security_protection		int,	-- ??
	lt_obtain_all_priv		int,	-- can be used to obtain root priv
	lt_obtain_some_priv		int,	-- can be used to obtain some restricted priv
	lt_confidentiality		int,	-- risks involving confidential data
	lt_integrity			int,	-- risks affecting data integrity
	lt_availability			int,	-- risks affecting system availability
	lt_sec_prot_other		int,	-- ??
	--
	vt_design_error			int,	-- cause: design error
	vt_input_validation_error	int,	-- cause: input validation error
	vt_boundary_condition_error	int,	-- cause: boundary conditions error
	vt_buffer_overflow		int,	-- cause: buffer overflow (bad cpu design)
	vt_access_validation_error	int,	-- cause: acl bug
	vt_exceptional_condition_error	int,	-- cause: exceptional condition not handled properly
	vt_environment_error		int,	-- cause: bad environment
	vt_configuration_error		int,	-- cause: sysadmin
	vt_race_condition		int,	-- cause: 1 infinite loop
	vt_other_vulnerability_type	int,	-- cause: other
	--
	dt_unix				int,	-- affects: unix
	dt_win_95			int,	-- affects: win95
	dt_win_nt			int,	-- affects: winnt, win2k, winxp
	dt_apple			int,	-- affects: macintosh
	dt_other_os			int,	-- affects: other
	--
	ec_operating_system		int,	-- affects: the operating system
	ec_network_protocol_stack	int,	-- affects: the network subsystem
	ec_non_server_application	int,	-- affects: an application
	ec_server_application		int,	-- affects: a service
	ec_hardware			int,	-- affects: system hardware
	ec_communication_protocol	int,	-- affects: communications
	ec_encryption_module		int,	-- affects: encryption subsystem
	ec_other			int,	-- affects: other
	--
	ec_specific_component		text,	-- contains the name of the particular part of the system that's affected
	PRIMARY KEY (e_vuln_id)                --inheritance doesnt apply to indexes (Postgresql 7.4)
) INHERITS (vuln.i_vuln)				-- uses standard vuln interface
;
CREATE INDEX t_vuln_nist_status ON vuln.t_vuln_nist(status_a);


--
--  MS vulns
--
CREATE TABLE	vuln.t_vuln_ms (
	bulletinlocationid	int,	-- @see t_locn_ms
	faqlocationid		int,	-- @see t_locn_ms
	faqpagename		text,	-- FAQ page name
	supported		text, -- boolean
	summary			text,	-- Summary text
	issue			text,	-- Issue text
	impactseverityid	int,	-- 0-4 -- 0 Very Low, 4 Critical
	prereqseverityid	int,	-- ???
	mitigationseverityid	int,	-- ???
	popularityseverityid	int,	-- ???
	PRIMARY KEY(e_vuln_id)
) INHERITS (vuln.i_vuln);
CREATE INDEX	t_vuln_ms_issue ON vuln.t_vuln_ms (issue);

--
-- Microsoft vulnerabilities imported from RSS
--
CREATE TABLE vuln.t_vuln_ms_bulletin (
) INHERITS (vuln.i_vuln);

CREATE TABLE vuln.t_vuln_ms_advisory (
) INHERITS (vuln.i_vuln);

CREATE TABLE vuln.t_vuln_ms_textonly (
) INHERITS (vuln.i_vuln);

--
--  SecurityFocus vulns
--
CREATE TABLE	vuln.t_vuln_securityfocus (
	bid		integer,	-- vulnerability id
	downloaded	boolean		DEFAULT false, 	-- /info /discussion /exploit and /solution pages for this vulnerability have been downloaded ?
	exploit		text,		-- how the vulnerability can be exploited
	solution	text,		-- known solution or workaround
	PRIMARY KEY(e_vuln_id)
) INHERITS (vuln.i_vuln);

--
--  Nessus vulns
--
CREATE TABLE	vuln.t_vuln_nessus (
	hash_key	bigint,		-- hashed key generated from text description
	PRIMARY KEY(e_vuln_id)
) INHERITS (vuln.i_vuln);
CREATE INDEX	t_vuln_nessus_i_hk ON vuln.t_vuln_nessus (hash_key);

--
--  Cert Ist vulns
--
CREATE TABLE	vuln.t_vuln_cert (
	issuer		text,			-- which cert ?
	version		text,			-- advisory version (last)
	context		text,			-- context
	technical	text,			-- technical info
	risk		int,
	solution        text,
	PRIMARY KEY(e_vuln_id)
) INHERITS (vuln.i_vuln);

--
-- certist advisories history
--
CREATE TABLE vuln.t_vuln_cert_history (
    e_vuln_id   integer     NOT NULL, --table t_vuln_cert
    change_date date        NOT NULL,
    revision  text          NOT NULL, 
    description     text,
    PRIMARY KEY (e_vuln_id, revision)
);

--
-- Lexsi vulns
--
CREATE TABLE vuln.t_vuln_lexsi (
        priority        text,
        type            text,
        target          text,
        exploit         text,
        impacts         text,
        solution        text,
        PRIMARY KEY(e_vuln_id)
) INHERITS (vuln.i_vuln);


CREATE TABLE	vuln.t_vuln_keycheck (
	e_vuln_id	integer	NOT NULL,
	vuln_name	text	NOT NULL
,	PRIMARY KEY (e_vuln_id, vuln_name)
);
CREATE UNIQUE INDEX t_vuln_keycheck_e_vuln_id ON vuln.t_vuln_keycheck (e_vuln_id);
CREATE UNIQUE INDEX t_vuln_keycheck_vuln_name ON vuln.t_vuln_keycheck (vuln_name);

SELECT create_trgfn_maint_mkey('vuln', 'i_vuln', 		't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_nist', 		't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_ms', 		't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_ms_bulletin', 	't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_ms_advisory',	't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_ms_textonly',	't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_securityfocus',	't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_nessus',		't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_cert',		't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);
SELECT create_trgfn_maint_mkey('vuln', 't_vuln_lexsi',		't_vuln_keycheck', ARRAY[ 'e_vuln_id', 'vuln_name' ]);

CREATE INDEX vuln_vn_i_vuln			ON	vuln.i_vuln			(vuln_name);
CREATE INDEX vuln_vn_t_vuln_nist		ON	vuln.t_vuln_nist		(vuln_name);
CREATE INDEX vuln_vn_t_vuln_ms			ON	vuln.t_vuln_ms			(vuln_name);
CREATE INDEX vuln_vn_t_vuln_ms_bulletin		ON	vuln.t_vuln_ms_bulletin		(vuln_name);
CREATE INDEX vuln_vn_t_vuln_ms_advisory		ON	vuln.t_vuln_ms_advisory		(vuln_name);
CREATE INDEX vuln_vn_t_vuln_ms_textonly		ON	vuln.t_vuln_ms_textonly		(vuln_name);
CREATE INDEX vuln_vn_t_vuln_securityfocus	ON	vuln.t_vuln_securityfocus	(vuln_name);
CREATE INDEX vuln_vn_t_vuln_nessus		ON	vuln.t_vuln_nessus		(vuln_name);
CREATE INDEX vuln_vn_t_vuln_cert		ON	vuln.t_vuln_cert		(vuln_name);
CREATE INDEX vuln_vn_t_vuln_lexsi		ON	vuln.t_vuln_lexsi		(vuln_name);

CREATE INDEX vuln_pd_i_vuln			ON	vuln.i_vuln			(publish_date);
CREATE INDEX vuln_pd_t_vuln_nist		ON	vuln.t_vuln_nist		(publish_date);
CREATE INDEX vuln_pd_t_vuln_ms			ON	vuln.t_vuln_ms			(publish_date);
CREATE INDEX vuln_pd_t_vuln_ms_bulletin		ON	vuln.t_vuln_ms_bulletin		(publish_date);
CREATE INDEX vuln_pd_t_vuln_ms_advisory		ON	vuln.t_vuln_ms_advisory		(publish_date);
CREATE INDEX vuln_pd_t_vuln_ms_textonly		ON	vuln.t_vuln_ms_textonly		(publish_date);
CREATE INDEX vuln_pd_t_vuln_securityfocus	ON	vuln.t_vuln_securityfocus	(publish_date);
CREATE INDEX vuln_pd_t_vuln_nessus		ON	vuln.t_vuln_nessus		(publish_date);
CREATE INDEX vuln_pd_t_vuln_cert		ON	vuln.t_vuln_cert		(publish_date);
CREATE INDEX vuln_pd_t_vuln_lexsi		ON	vuln.t_vuln_lexsi		(publish_date);

CREATE INDEX vuln_ti_t_vuln_ms_bulletin		ON	vuln.t_vuln_ms_bulletin		(title);
CREATE INDEX vuln_ti_t_vuln_ms_advisory		ON	vuln.t_vuln_ms_advisory		(title);
CREATE INDEX vuln_ti_t_vuln_ms_textonly		ON	vuln.t_vuln_ms_textonly		(title);

-- 
-- patch to vulnerability
--
CREATE TABLE vuln.patch_to_vuln (
	e_patch_id int NOT NULL,
	e_vuln_id int NOT NULL
);

-- todo bug2531 add multi-table constraints to i_patch & inherited tables.

--
-- Patch tables
-- 
--
-- patch data interface
--
CREATE SEQUENCE vuln.i_patch_serial;
CREATE TABLE	vuln.i_patch
(
	e_patch_id	int	DEFAULT nextval('vuln.i_patch_serial'), -- Uniqie ESIS patch id
	patch_name	text,		-- Patch ID, Specified per-vendor.
	publish_date	timestamptz,	-- Publish date if available
	url		text,		-- URL for patch if available
	description text,
	PRIMARY KEY(e_patch_id)
);


--
-- define tables to hold data
--

--
--  sun.com patchdiag.xref patch & vulnerability infomation
--

-- main patch information table
CREATE TABLE	vuln.t_patch_sun ( -- patch_id is the major patch number eg. 123456-89 -> 123456
	patch_rev			text,		-- minor patch revision   -> 89
	unk1				text,		-- unknown purpose
	sec				text,		-- if 'S' this is a security patch
	unk2				text,		-- unknown purpose
	unk3				text,		-- unknown purpose
	ver				text,		-- version ??
	description			text,		-- text description
	PRIMARY KEY(e_patch_id)
) INHERITS (vuln.i_patch);					-- uses standard patch interface

-- packages (SUNWcsu ...) affected by the sun vulnerability / patch.
CREATE TABLE	vuln.t_patch_sun_pkg (
	e_patch_id	int, -- key for t_patch_sun
	short_name	text, -- short name eg SUNWcsu
	version		text, -- package version affected
	revision	text, -- package revision affected
	patch_number	text  -- patch number affected ??
);

-- architectures (sparc, i386) affected by the sun vulnerability / patch
CREATE TABLE	vuln.t_patch_sun_arch (
	e_patch_id	int, -- key for t_patch_sun
	arch_major	text, -- major architecture (sparc)
	arch_minor	text  -- minor architecture (sun4m)
);


--
--  Microsoft security vulnerabilities.
--

-- <Patch />
CREATE TABLE	vuln.t_patch_ms ( -- uses patch filename as the patch_id
	PatchName	text NOT NULL,		-- patch file name == patch_id
	PatchLocationid int,			-- @see t_locn_ms
	sbid		int,				-- SBID ???
	sqNumber	text,				-- SQNumber ???
	noreboot	int,				-- Does this patch need rebooting on install?
	severityid	int NOT NULL,		-- 0-4 -- 0 Very Low, 4 Critical -- Important patch info!
	bulletinid	text NOT NULL, 		-- BulletinID -> cve_id in ms data model
	PRIMARY KEY(e_patch_id)
) INHERITS (vuln.i_patch);
CREATE INDEX bulletinid_pms ON vuln.t_patch_ms(bulletinid);

-- <AffectedProduct />
CREATE TABLE	vuln.t_patch_ms_p (
	e_patch_id	int NOT NULL,	-- @see t_patch_ms
	productid	int NOT NULL,	-- @see t_product_ms
	fixedinsp	int,			-- @see t_product_ms_sp - 1st service pack where the vulnerability is fixed.
	PRIMARY KEY (e_patch_id, productid)
);

-- <AffectedServicePack />
CREATE TABLE	vuln.t_patch_ms_p_asp (
	e_patch_id		int NOT NULL,		-- @see t_patch_ms
	productid		int NOT NULL,		-- @see t_product_ms
	servicepackid	int NOT NULL,		-- @see t_product_ms_sp
	PRIMARY KEY (e_patch_id, productid, servicepackid)
);

-- <Location />
CREATE TABLE	vuln.t_locn_ms (
	locationid		int,			-- primary key
	path			text,			-- url
	absolutepath	text, 		-- @todo: boolean, not much use
	PRIMARY KEY(locationid)
);

-- <Product />
CREATE TABLE	vuln.t_product_ms (
	productid	int,					-- primary key
	name		text NOT NULL,			-- product name
	minimumsupportedservicepackid int,	-- 1st supported service pack if any
	currentservicepackid		int,	-- current service pack if any
	currentversion	text,				-- current version string
	PRIMARY KEY(productid)
);

-- <ProductFamily />
CREATE TABLE	vuln.t_product_ms_f (
	productid	int NOT NULL,		-- key into t_product_ms
	productfamilyid	int NOT NULL	-- ??? if we group by this do the products go into groups?
);

-- <AvailableSP />
CREATE TABLE	vuln.t_product_ms_asp (
	productid	int NOT NULL,			-- @see t_product_ms
	servicepackid	int NOT NULL		-- @see t_product_ms_sp
);

-- <ServicePack />
CREATE TABLE	vuln.t_product_ms_sp (
	servicepackid	int,			-- primary key
	name		text NOT NULL,		-- service pack name
	url			text,				-- service pack download Url
	releasedate	timestamptz,		-- service pack release date
	PRIMARY KEY (servicepackid)
);

--
-- Scan data from security scans
--

-- Create a table that's good for holding meta-information universal to all 
-- security scans.
--
CREATE SEQUENCE	vuln.t_scan_serial;		-- used to generate unique keys
CREATE TABLE	vuln.t_scan (
	t_scan_id		integer		DEFAULT	nextval('vuln.t_scan_serial'),
	scan_type	text,		-- eg. "nessus"
	scan_filename	text,		-- eg. data/report.nbe
	imported_date	timestamptz	DEFAULT current_timestamp,	-- when the file was loaded, for gui
	PRIMARY KEY(t_scan_id)
);


--
-- Nessus scan data
--
-- @todo extend by adding xml data

-- define a table containing keys that are referenced from t_scan
CREATE SEQUENCE	vuln.t_scan_nessus_keys_serial;
CREATE TABLE	vuln.t_scan_nessus_keys (
	t_scan_nessus_keys_id	integer		DEFAULT nextval('vuln.t_scan_nessus_keys_serial'),
	t_scan_id		integer,	-- @see t_scan
	subnet		text,		-- dotted ip subnet identifier or example.com
	host		text,		-- dotted ip host address or host.example.com
	info		text,		-- informative - eg. event type, port type, ...
	PRIMARY KEY(t_scan_nessus_keys_id)
);

-- how timestamps relate to scan network info
CREATE TABLE	vuln.t_scan_nessus_timestamps (
	t_scan_nessus_keys_id	integer,	-- @see t_scan_nessus_keys
	t		timestamptz	-- timestamp value
);

-- how scan results relate to scan network info
CREATE SEQUENCE	vuln.t_scan_nessus_results_serial;
CREATE TABLE	vuln.t_scan_nessus_results (
	t_scan_nessus_results_id	integer		DEFAULT nextval('vuln.t_scan_nessus_results_serial'),
	t_scan_nessus_keys_id	integer,	-- @see t_scan_nessus_keys
	unk_id		text,		-- unknown id#
	type		text,		-- eg. "Security Warning"
	hash_key	bigint,	-- @see t_vuln_nessus
	risk_factor	text,		-- eg. "Low" scanned in from description
	PRIMARY KEY(t_scan_nessus_results_id)
);
CREATE INDEX	t_scan_nessus_results_i_hk ON vuln.t_scan_nessus_results (hash_key);


--
-- metric tables
--

--
-- report table for vulnerabilities by day
--
CREATE TABLE vuln.e_vulns_daily (
	calc_day		date,
	count_received		integer	DEFAULT 0 NOT NULL,	--# of vulnerabilities received
	count_updated		integer	DEFAULT 0 NOT NULL,	--# of vulnerabilities updated
	count_received_new	integer	DEFAULT 0 NOT NULL,	--# of vulnerabilities received put in a New state
	count_new		integer	DEFAULT 0 NOT NULL,	--# of vulnerabilities in a New state
	count_all_unhidden	integer	DEFAULT 0 NOT NULL,	--# of vulnerabilities not hidden (all status/decisions)
	count_received_process 	integer DEFAULT 0 NOT NULL,     --# f vulnerabilities received concerning active vendors/products
	count_closed		integer	DEFAULT 0 NOT NULL,	--# if vulnerailities closed that day
	PRIMARY KEY(calc_day)
);


--
-- report table for metrics on triaged vulnerabilities 
--
CREATE TABLE vuln.e_triage_daily (
	calc_day		date,
	count_triaged		integer	DEFAULT 0 NOT NULL,	-- vulns triaged that day
	count_ignored		integer	DEFAULT 0 NOT NULL,	-- vulns triaged that day (ignore)
	count_added		integer	DEFAULT 0 NOT NULL,	-- vulns triaged that day (add)
	count_votes		integer	DEFAULT 0 NOT NULL,	-- votes that day
	count_vote_add		integer	DEFAULT 0 NOT NULL,	-- votes that day (add)
	count_vote_ignore	integer	DEFAULT 0 NOT NULL,	-- votes that day (ignore)
	count_voter		integer	DEFAULT 0 NOT NULL,	-- people who vote that day
	count_vuln_next_vrt	integer	DEFAULT 0 NOT NULL,	-- vulns in next vrt
	count_vulns_next_vrt_with_analyze	integer,	-- vulns in next vrt with an analyze
	PRIMARY KEY(calc_day)	
);

--
-- report table for metrics on actions
--
CREATE TABLE vuln.e_actions_daily(
	calc_day		date,		
	count_unclosed		integer	DEFAULT 0 NOT NULL,	--# of actions not fixed/wont fix 
	count_unclosed_late	integer	DEFAULT 0 NOT NULL,	--# of actions not fixed/wont fix with a past due date
	count_closed		integer	DEFAULT 0 NOT NULL,	--# of actions fixed or wont fix on that day
	count_all		integer	DEFAULT 0 NOT NULL,	--# of all actions created
	PRIMARY KEY(calc_day)
);

--
-- report table for metrics on decisions
--
CREATE TABLE vuln.e_decision_daily (
	calc_day		date,
	decision		integer,	-- see vuln.e_vulnerability_status
	count_all		integer	DEFAULT 0 NOT NULL,	-- all vulns by decision
	count_all_unclosed	integer	DEFAULT 0 NOT NULL,	-- all unclosed vulns by decision
	count_closed_vrt	integer	DEFAULT 0 NOT NULL,	-- all vulns in a closed vrt
	count_closed_vrt_unclosed	integer	DEFAULT 0 NOT NULL,	-- all unclosed vulns in a closed vrt
	count_next_vrt		integer	DEFAULT 0 NOT NULL,	-- all vulns in the next vrt
	count_current_vrt	integer	DEFAULT 0 NOT NULL,	-- all vulns in the current vrt
	PRIMARY KEY(calc_day, decision)
);

--
-- report table for metrics on status
--
CREATE TABLE vuln.e_status_daily (
	calc_day		date,
	status			integer,	-- see vuln.e_vulnerability_mav_status
	count_vulns_closed_vrt	integer	DEFAULT 0 NOT NULL,	-- count vulns in closed vrt
	count_vulns_next_vrt	integer	DEFAULT 0 NOT NULL,	-- count vulns in the next vrt
	count_vulns_current_vrt	integer	DEFAULT 0 NOT NULL,	-- count vulns in the current vrt
	count_all_vulns		integer	DEFAULT 0 NOT NULL,	-- count all vulns
	count_actions		integer	DEFAULT 0 NOT NULL,	-- count all actions
	PRIMARY KEY(calc_day, status)
);

--
-- report table for metrics on priority 
--
CREATE TABLE vuln.e_priority_daily(
	calc_day		date,
	priority		integer,	-- see vuln.e_vulnerability_priority
	count_vulns_repair	integer	DEFAULT 0 NOT NULL,	-- vulns in Action plan on a day
	count_actions		integer	DEFAULT 0 NOT NULL,	-- actions opened on a day
	PRIMARY KEY(calc_day, priority)
);

--
-- report table by day on severity
--
CREATE TABLE vuln.e_severity_daily (
	calc_day		date,	
	severity		int,		-- see vuln.e_vulnerability_severity
	count_received		integer	DEFAULT 0 NOT NULL,	-- # of vulnerabilities received with this severity
	count_new		integer	DEFAULT 0 NOT NULL,	-- # of new vulnerabilities with this severity
	count_action		integer	DEFAULT 0 NOT NULL,	-- # of vulns in action plan with this severity
	PRIMARY KEY(calc_day, severity)
);

--
-- report table for metrics on users
--
CREATE TABLE vuln.e_users_daily(
	calc_day		date,
	with_opened_actions	integer	DEFAULT 0 NOT NULL,	-- # of users that are owner of opened actions
	with_late_actions	integer	DEFAULT 0 NOT NULL,	-- # of users that are owner of late opened actions
	own_unclosed_repairing_vuln	integer	DEFAULT 0 NOT NULL,-- # of users that are owner of a non closed vuln in Repair status
	PRIMARY KEY(calc_day)
);

--
-- report table for metrics on groups
--
CREATE TABLE vuln.e_groups_daily(
	calc_day		date,
	with_opened_actions	integer	DEFAULT 0 NOT NULL,	-- # of groups with users that are owner of opened actions
	with_late_actions	integer	DEFAULT 0 NOT NULL,	-- # of groups with users that are owner of late opened actions
	own_unclosed_repairing_vuln	integer	DEFAULT 0 NOT NULL,-- # of groups with users that are owner of a non closed vuln in Repair status
	PRIMARY KEY(calc_day)
);

--
-- report table for metrics on vendors
--
CREATE TABLE vuln.e_vendor_daily(
	calc_day		date,
	in_new			integer	DEFAULT 0 NOT NULL,	-- # of vendors with vulnerabilities in New
	in_repair		integer	DEFAULT 0 NOT NULL,	-- # of vendors with vulnerabilities in Repair
	in_investigate		integer	DEFAULT 0 NOT NULL,	-- # of vendors with vulnerabilities in Investigate
	created			integer	DEFAULT 0 NOT NULL,	-- # of vendors created this day
	ignored			integer	DEFAULT 0 NOT NULL,	-- # of vendors ignored
	active			integer	DEFAULT 0 NOT NULL,	-- # of vendors active
	n_a			integer	DEFAULT 0 NOT NULL,	-- # of vendors not active but not ignored
	PRIMARY KEY(calc_day)
);

--
-- report table for metrics on products
--
CREATE TABLE vuln.e_product_daily(
	calc_day		date,
	in_new			integer	DEFAULT 0 NOT NULL,	-- # of products with vulnerabilities in New
	in_repair		integer	DEFAULT 0 NOT NULL,	-- # of products with vulnerabilities in Repair
	in_investigate		integer	DEFAULT 0 NOT NULL,	-- # of products with vulnerabilities in Investigate
	created			integer	DEFAULT 0 NOT NULL,	-- # of products created this day
	ignored			integer	DEFAULT 0 NOT NULL,	-- # of products ignored
	active			integer	DEFAULT 0 NOT NULL,	-- # of products active
	n_a			integer	DEFAULT 0 NOT NULL,	-- # of products not active but not ignored
	PRIMARY KEY(calc_day)
);

--
-- report table for metrics on versions
--
CREATE TABLE vuln.e_version_daily(
	calc_day		date,
	in_new			integer	DEFAULT 0 NOT NULL,	-- # of versions with vulnerabilities in New
	in_repair		integer	DEFAULT 0 NOT NULL,	-- # of versions with vulnerabilities in Repair
	in_investigate		integer	DEFAULT 0 NOT NULL,	-- # of versions with vulnerabilities in Investigate
	created			integer	DEFAULT 0 NOT NULL,	-- # of versions created this day
	active			integer	DEFAULT 0 NOT NULL,	-- # of versions active
	n_a			integer	DEFAULT 0 NOT NULL,	-- # of versions not active but not ignored
	PRIMARY KEY(calc_day)
);

--
-- metrics per user
--
CREATE TABLE vuln.e_user_details_daily (
 	calc_day 		date,
 	e_people_id 		integer, 	---e_people
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	count_total_vulns 		integer DEFAULT 0 NOT NULL, 	-- # of vulns for this user with this raci
 	count_late_vulns 		integer DEFAULT 0 NOT NULL,	-- # of vulns for this user with this raci that are late
 	count_delayed_vulns 		integer DEFAULT 0 NOT NULL,	-- # of vulns for this user with this raci that have been delayed on this day
 	count_total_actions 		integer DEFAULT 0 NOT NULL, 	-- # of actions for this user with this raci
 	count_late_actions 		integer DEFAULT 0 NOT NULL,	-- # of actions for this user with this raci that are late
 	count_delayed_actions 		integer DEFAULT 0 NOT NULL,	-- # of actions for this user with this raci that have been delayed on this day
 	PRIMARY KEY(calc_day, e_people_id, r,a,c,i)
);

CREATE TABLE vuln.e_user_priority_daily (
 	calc_day 			date,
 	e_people_id 			integer, 	---e_people
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	priority 			integer,	-- see vuln.e_vulnerability_priority
 	count_vulns 			integer DEFAULT 0 NOT NULL, 	-- nb vulns with this priority
 	vulns_changed_this_day 		integer DEFAULT 0 NOT NULL,	-- nb vulns that changed to this priority  
 	count_actions 			integer DEFAULT 0 NOT NULL,	-- nb actions with this priority
 	actions_changed_this_day 	integer DEFAULT 0 NOT NULL, 	-- nb actions that changed to this priority
 	PRIMARY KEY(calc_day, e_people_id, r,a,c,i, priority)
);

CREATE TABLE vuln.e_user_severity_daily (
 	calc_day 			date,
 	e_people_id 			integer, 	---e_people
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	severity 			integer,	-- see vuln.e_vulnerability_severity
	count_vulns 		   	integer	DEFAULT 0 NOT NULL,     -- # of vulnerabilities 
 	PRIMARY KEY(calc_day, e_people_id, r, a, c, i, severity)
);

CREATE TABLE vuln.e_user_decision_daily (
 	calc_day 			date,
 	e_people_id 			integer, 	---e_people
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	decision 			integer,	-- see vuln.e_vulnerability_status
 	count_vulns 			integer DEFAULT 0 NOT NULL, 	-- nb vulns with this decision
 	vulns_changed_this_day 		integer DEFAULT 0 NOT NULL,	-- nb vulns that changed to this decision  
 	PRIMARY KEY(calc_day, e_people_id, r, a, c, i, decision)
);

CREATE TABLE vuln.e_user_status_daily (
 	calc_day 			date,
 	e_people_id 			integer, 	---e_people
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	status 				integer,	-- see vuln.e_vulnerability_mav_status
 	count_vulns 			integer DEFAULT 0 NOT NULL, 	-- nb vulns with this status
 	vulns_changed_this_day 		integer DEFAULT 0 NOT NULL,	-- nb vulns that changed to this status
 	count_actions 			integer DEFAULT 0 NOT NULL,	-- nb actions with this status
 	actions_changed_this_day 	integer DEFAULT 0 NOT NULL, 	-- nb actions that changed to this status
 	PRIMARY KEY(calc_day, e_people_id, r, a, c, i, status)
);


CREATE TABLE vuln.e_group_details_daily (
 	calc_day 		date,
 	e_group_id 		integer, 	---e_group
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	count_total_vulns 		integer DEFAULT 0 NOT NULL, 	-- # of vulns for this group with this raci
 	count_late_vulns 		integer DEFAULT 0 NOT NULL,	-- # of vulns for this group with this raci that are late
 	count_delayed_vulns 		integer DEFAULT 0 NOT NULL,	-- # of vulns for this group with this raci that have been delayed on this day
 	count_total_actions 		integer DEFAULT 0 NOT NULL, 	-- # of actions for this group with this raci
 	count_late_actions 		integer DEFAULT 0 NOT NULL,	-- # of actions for this group with this raci that are late
 	count_delayed_actions 		integer DEFAULT 0 NOT NULL,	-- # of actions for this group with this raci that have been delayed on this day
 	PRIMARY KEY(calc_day, e_group_id, r,a,c,i)
);
CREATE TABLE vuln.e_group_members_daily (
 	calc_day 		date,
 	e_group_id 		integer, 	---e_group
 	count_members 		integer DEFAULT 0 NOT NULL,
 	PRIMARY KEY(calc_day, e_group_id)
);

CREATE TABLE vuln.e_group_priority_daily (
 	calc_day 			date,
 	e_group_id 			integer, 	---e_group
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	priority 			integer,	-- see vuln.e_vulnerability_priority
 	count_vulns 			integer DEFAULT 0 NOT NULL, 	-- nb vulns with this priority
 	vulns_changed_this_day 		integer DEFAULT 0 NOT NULL,	-- nb vulns that changed to this priority  
 	count_actions 			integer DEFAULT 0 NOT NULL,	-- nb actions with this priority
 	actions_changed_this_day 	integer DEFAULT 0 NOT NULL, 	-- nb actions that changed to this priority
 	PRIMARY KEY(calc_day, e_group_id, r,a,c,i, priority)
);

CREATE TABLE vuln.e_group_severity_daily (
 	calc_day 			date,
 	e_group_id 			integer, 	---e_group
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	severity 			integer,	-- see vuln.e_vulnerability_severity
	count_vulns 		   	integer	DEFAULT 0 NOT NULL,     -- # of vulnerabilities 
 	PRIMARY KEY(calc_day, e_group_id, r, a, c, i, severity)
);

CREATE TABLE vuln.e_group_decision_daily (
 	calc_day 			date,
 	e_group_id 			integer, 	---e_group
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	decision 			integer,	-- see vuln.e_vulnerability_status
 	count_vulns 			integer DEFAULT 0 NOT NULL, 	-- nb vulns with this decision
 	vulns_changed_this_day 		integer DEFAULT 0 NOT NULL,	-- nb vulns that changed to this decision  
 	PRIMARY KEY(calc_day, e_group_id, r, a, c, i, decision)
);

CREATE TABLE vuln.e_group_status_daily (
 	calc_day 			date,
 	e_group_id 			integer, 	---e_group
 	r  				boolean,
 	a  				boolean,
 	c  				boolean,
 	i  				boolean,
 	status 				integer,	-- see vuln.e_vulnerability_mav_status
 	count_vulns 			integer DEFAULT 0 NOT NULL, 	-- nb vulns with this status
 	vulns_changed_this_day 		integer DEFAULT 0 NOT NULL,	-- nb vulns that changed to this status
 	count_actions 			integer DEFAULT 0 NOT NULL,	-- nb actions with this status
 	actions_changed_this_day 	integer DEFAULT 0 NOT NULL, 	-- nb actions that changed to this status
 	PRIMARY KEY(calc_day, e_group_id, r, a, c, i, status)
);
